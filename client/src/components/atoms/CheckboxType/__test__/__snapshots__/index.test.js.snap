// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`atoms/CheckboxType GIven the component is mounted then it should render the markup 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <CheckboxType
    attr={
      Object {
        "id": 1,
        "name": "One time supplier?",
        "options": Array [
          "Testing",
          "In receivership",
        ],
      }
    }
    disabled={false}
    errors={Object {}}
    isDisabled={true}
    values={Object {}}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "children": Array [
        <ForwardRef>
          <LabelComponent
            name="One time supplier?"
          />
        </ForwardRef>,
        Array [
          <ForwardRef>
            <ForwardRef
              checked={true}
              defaultChecked={true}
              name="One time supplier?"
            />
            <span />
          </ForwardRef>,
          <ForwardRef>
            <ForwardRef
              checked={true}
              defaultChecked={true}
              name="One time supplier?"
            />
            <span />
          </ForwardRef>,
        ],
      ],
    },
    "ref": null,
    "rendered": Array [
      Object {
        "instance": null,
        "key": undefined,
        "nodeType": "function",
        "props": Object {
          "children": <LabelComponent
            name="One time supplier?"
          />,
        },
        "ref": null,
        "rendered": Object {
          "instance": null,
          "key": undefined,
          "nodeType": "class",
          "props": Object {
            "id": undefined,
            "name": "One time supplier?",
            "toolTip": undefined,
          },
          "ref": null,
          "rendered": null,
          "type": [Function],
        },
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-htoDjs",
            "isStatic": true,
            "rules": Array [
              "
    margin-bottom: 20px;
",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-htoDjs",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": "0",
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef
              checked={true}
              defaultChecked={true}
              name="One time supplier?"
            />,
            <span />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "checked": true,
              "defaultChecked": true,
              "disabled": undefined,
              "error": undefined,
              "id": undefined,
              "name": "One time supplier?",
              "value": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "WithTheme(Checkbox)",
              "render": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "span",
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gqjmRU",
            "isStatic": true,
            "rules": Array [
              "
    
    > span{
        line-height: 36px;
        vertical-align: top;
        margin-left: 10px;
    }
    ",
              "$$typeof: Symbol(react.forward_ref); render: function (props, ref) {
    return React__default.createElement(
      ThemeConsumer,
      null,
      function (theme) {
        // $FlowFixMe
        var defaultProps = Component.defaultProps;

        var themeProp = determineTheme(props, theme, defaultProps);

        if (process.env.NODE_ENV !== 'production' && themeProp === undefined) {
          // eslint-disable-next-line no-console
          console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class \\"' + getComponentName(Component) + '\\"');
        }

        return React__default.createElement(Component, _extends({}, props, { theme: themeProp, ref: ref }));
      }
    );
  }; display-name: WithTheme(Checkbox);",
              " {
        margin-bottom: 22px;
    }

",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gqjmRU",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
      Object {
        "instance": null,
        "key": "1",
        "nodeType": "function",
        "props": Object {
          "children": Array [
            <ForwardRef
              checked={true}
              defaultChecked={true}
              name="One time supplier?"
            />,
            <span />,
          ],
        },
        "ref": null,
        "rendered": Array [
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "function",
            "props": Object {
              "checked": true,
              "defaultChecked": true,
              "disabled": undefined,
              "error": undefined,
              "id": undefined,
              "name": "One time supplier?",
              "value": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": Object {
              "$$typeof": Symbol(react.forward_ref),
              "displayName": "WithTheme(Checkbox)",
              "render": [Function],
              Symbol(Symbol.hasInstance): [Function],
            },
          },
          Object {
            "instance": null,
            "key": undefined,
            "nodeType": "host",
            "props": Object {
              "children": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": "span",
          },
        ],
        "type": Object {
          "$$typeof": Symbol(react.forward_ref),
          "attrs": Array [],
          "componentStyle": ComponentStyle {
            "componentId": "sc-gqjmRU",
            "isStatic": true,
            "rules": Array [
              "
    
    > span{
        line-height: 36px;
        vertical-align: top;
        margin-left: 10px;
    }
    ",
              "$$typeof: Symbol(react.forward_ref); render: function (props, ref) {
    return React__default.createElement(
      ThemeConsumer,
      null,
      function (theme) {
        // $FlowFixMe
        var defaultProps = Component.defaultProps;

        var themeProp = determineTheme(props, theme, defaultProps);

        if (process.env.NODE_ENV !== 'production' && themeProp === undefined) {
          // eslint-disable-next-line no-console
          console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class \\"' + getComponentName(Component) + '\\"');
        }

        return React__default.createElement(Component, _extends({}, props, { theme: themeProp, ref: ref }));
      }
    );
  }; display-name: WithTheme(Checkbox);",
              " {
        margin-bottom: 22px;
    }

",
            ],
          },
          "displayName": "styled.div",
          "foldedComponentIds": Array [],
          "render": [Function],
          "styledComponentId": "sc-gqjmRU",
          "target": "div",
          "toString": [Function],
          "warnTooManyClasses": [Function],
          "withComponent": [Function],
        },
      },
    ],
    "type": Object {
      "$$typeof": Symbol(react.forward_ref),
      "attrs": Array [],
      "componentStyle": ComponentStyle {
        "componentId": "sc-gzVnrw",
        "isStatic": true,
        "rules": Array [
          "
    margin-bottom: 24px;
    position: relative
        > label{
            padding-bottom: 8px;
            width: 100%;
        }
    select{
        font-style: normal;
    }
    textarea{
        resize: none;
    }  
    .date-ic{
        position: absolute;
        right: 12px;
        top: 45px;
        background-color: #fff;
    }
    input[type=\\"date\\"]{
        text-transform: uppercase;
    }
    input[type=\\"date\\"]::-webkit-calendar-picker-indicator {
        color: transparent;
        background: none;
        z-index: 1;
    }

",
        ],
      },
      "displayName": "styled.div",
      "foldedComponentIds": Array [],
      "render": [Function],
      "styledComponentId": "sc-gzVnrw",
      "target": "div",
      "toString": [Function],
      "warnTooManyClasses": [Function],
      "withComponent": [Function],
    },
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "children": Array [
          <ForwardRef>
            <LabelComponent
              name="One time supplier?"
            />
          </ForwardRef>,
          Array [
            <ForwardRef>
              <ForwardRef
                checked={true}
                defaultChecked={true}
                name="One time supplier?"
              />
              <span />
            </ForwardRef>,
            <ForwardRef>
              <ForwardRef
                checked={true}
                defaultChecked={true}
                name="One time supplier?"
              />
              <span />
            </ForwardRef>,
          ],
        ],
      },
      "ref": null,
      "rendered": Array [
        Object {
          "instance": null,
          "key": undefined,
          "nodeType": "function",
          "props": Object {
            "children": <LabelComponent
              name="One time supplier?"
            />,
          },
          "ref": null,
          "rendered": Object {
            "instance": null,
            "key": undefined,
            "nodeType": "class",
            "props": Object {
              "id": undefined,
              "name": "One time supplier?",
              "toolTip": undefined,
            },
            "ref": null,
            "rendered": null,
            "type": [Function],
          },
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-htoDjs",
              "isStatic": true,
              "rules": Array [
                "
    margin-bottom: 20px;
",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-htoDjs",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": "0",
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef
                checked={true}
                defaultChecked={true}
                name="One time supplier?"
              />,
              <span />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "checked": true,
                "defaultChecked": true,
                "disabled": undefined,
                "error": undefined,
                "id": undefined,
                "name": "One time supplier?",
                "value": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "WithTheme(Checkbox)",
                "render": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gqjmRU",
              "isStatic": true,
              "rules": Array [
                "
    
    > span{
        line-height: 36px;
        vertical-align: top;
        margin-left: 10px;
    }
    ",
                "$$typeof: Symbol(react.forward_ref); render: function (props, ref) {
    return React__default.createElement(
      ThemeConsumer,
      null,
      function (theme) {
        // $FlowFixMe
        var defaultProps = Component.defaultProps;

        var themeProp = determineTheme(props, theme, defaultProps);

        if (process.env.NODE_ENV !== 'production' && themeProp === undefined) {
          // eslint-disable-next-line no-console
          console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class \\"' + getComponentName(Component) + '\\"');
        }

        return React__default.createElement(Component, _extends({}, props, { theme: themeProp, ref: ref }));
      }
    );
  }; display-name: WithTheme(Checkbox);",
                " {
        margin-bottom: 22px;
    }

",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gqjmRU",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
        Object {
          "instance": null,
          "key": "1",
          "nodeType": "function",
          "props": Object {
            "children": Array [
              <ForwardRef
                checked={true}
                defaultChecked={true}
                name="One time supplier?"
              />,
              <span />,
            ],
          },
          "ref": null,
          "rendered": Array [
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "function",
              "props": Object {
                "checked": true,
                "defaultChecked": true,
                "disabled": undefined,
                "error": undefined,
                "id": undefined,
                "name": "One time supplier?",
                "value": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": Object {
                "$$typeof": Symbol(react.forward_ref),
                "displayName": "WithTheme(Checkbox)",
                "render": [Function],
                Symbol(Symbol.hasInstance): [Function],
              },
            },
            Object {
              "instance": null,
              "key": undefined,
              "nodeType": "host",
              "props": Object {
                "children": undefined,
              },
              "ref": null,
              "rendered": null,
              "type": "span",
            },
          ],
          "type": Object {
            "$$typeof": Symbol(react.forward_ref),
            "attrs": Array [],
            "componentStyle": ComponentStyle {
              "componentId": "sc-gqjmRU",
              "isStatic": true,
              "rules": Array [
                "
    
    > span{
        line-height: 36px;
        vertical-align: top;
        margin-left: 10px;
    }
    ",
                "$$typeof: Symbol(react.forward_ref); render: function (props, ref) {
    return React__default.createElement(
      ThemeConsumer,
      null,
      function (theme) {
        // $FlowFixMe
        var defaultProps = Component.defaultProps;

        var themeProp = determineTheme(props, theme, defaultProps);

        if (process.env.NODE_ENV !== 'production' && themeProp === undefined) {
          // eslint-disable-next-line no-console
          console.warn('[withTheme] You are not using a ThemeProvider nor passing a theme prop or a theme in defaultProps in component class \\"' + getComponentName(Component) + '\\"');
        }

        return React__default.createElement(Component, _extends({}, props, { theme: themeProp, ref: ref }));
      }
    );
  }; display-name: WithTheme(Checkbox);",
                " {
        margin-bottom: 22px;
    }

",
              ],
            },
            "displayName": "styled.div",
            "foldedComponentIds": Array [],
            "render": [Function],
            "styledComponentId": "sc-gqjmRU",
            "target": "div",
            "toString": [Function],
            "warnTooManyClasses": [Function],
            "withComponent": [Function],
          },
        },
      ],
      "type": Object {
        "$$typeof": Symbol(react.forward_ref),
        "attrs": Array [],
        "componentStyle": ComponentStyle {
          "componentId": "sc-gzVnrw",
          "isStatic": true,
          "rules": Array [
            "
    margin-bottom: 24px;
    position: relative
        > label{
            padding-bottom: 8px;
            width: 100%;
        }
    select{
        font-style: normal;
    }
    textarea{
        resize: none;
    }  
    .date-ic{
        position: absolute;
        right: 12px;
        top: 45px;
        background-color: #fff;
    }
    input[type=\\"date\\"]{
        text-transform: uppercase;
    }
    input[type=\\"date\\"]::-webkit-calendar-picker-indicator {
        color: transparent;
        background: none;
        z-index: 1;
    }

",
          ],
        },
        "displayName": "styled.div",
        "foldedComponentIds": Array [],
        "render": [Function],
        "styledComponentId": "sc-gzVnrw",
        "target": "div",
        "toString": [Function],
        "warnTooManyClasses": [Function],
        "withComponent": [Function],
      },
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
