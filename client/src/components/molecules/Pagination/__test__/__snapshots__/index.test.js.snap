// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`molecules/PaginationComponent Given the Pagination component is mounted it should render the markup 1`] = `
ShallowWrapper {
  Symbol(enzyme.__root__): [Circular],
  Symbol(enzyme.__unrendered__): <HOC
    hrefTemplate="sample url"
    onChangeResultsPerPage={[MockFunction]}
    pageControlsText="sample page text"
    totalResults={10}
  />,
  Symbol(enzyme.__renderer__): Object {
    "batchedUpdates": [Function],
    "checkPropTypes": [Function],
    "getNode": [Function],
    "render": [Function],
    "simulateError": [Function],
    "simulateEvent": [Function],
    "unmount": [Function],
  },
  Symbol(enzyme.__node__): Object {
    "instance": null,
    "key": undefined,
    "nodeType": "function",
    "props": Object {
      "_handlePageChange": [Function],
      "hrefTemplate": "sample url",
      "linkTemplate": "/page=%{pageNumber}",
      "onChangeResultsPerPage": [MockFunction],
      "pageControlsText": "sample page text",
      "pageText": "Page",
      "totalCount": 50,
      "totalResults": 10,
    },
    "ref": null,
    "rendered": null,
    "type": [Function],
  },
  Symbol(enzyme.__nodes__): Array [
    Object {
      "instance": null,
      "key": undefined,
      "nodeType": "function",
      "props": Object {
        "_handlePageChange": [Function],
        "hrefTemplate": "sample url",
        "linkTemplate": "/page=%{pageNumber}",
        "onChangeResultsPerPage": [MockFunction],
        "pageControlsText": "sample page text",
        "pageText": "Page",
        "totalCount": 50,
        "totalResults": 10,
      },
      "ref": null,
      "rendered": null,
      "type": [Function],
    },
  ],
  Symbol(enzyme.__options__): Object {
    "adapter": ReactSixteenAdapter {
      "options": Object {
        "enableComponentDidUpdateOnSetState": true,
        "legacyContextMode": "parent",
        "lifecycles": Object {
          "componentDidUpdate": Object {
            "onSetState": true,
          },
          "getChildContext": Object {
            "calledByRenderer": false,
          },
          "getDerivedStateFromProps": true,
          "getSnapshotBeforeUpdate": true,
          "setState": Object {
            "skipsComponentDidUpdateOnNullish": true,
          },
        },
      },
    },
  },
}
`;
